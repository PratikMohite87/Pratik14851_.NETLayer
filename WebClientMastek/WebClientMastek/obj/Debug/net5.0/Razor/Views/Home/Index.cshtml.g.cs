#pragma checksum "C:\Users\Pratik\Documents\MASTEK\Pratik14851_.NETLayer\WebClientMastek\WebClientMastek\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "da9f336f92fe47fbbee1badfccffbe301e50917a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Pratik\Documents\MASTEK\Pratik14851_.NETLayer\WebClientMastek\WebClientMastek\Views\_ViewImports.cshtml"
using WebClientMastek;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Pratik\Documents\MASTEK\Pratik14851_.NETLayer\WebClientMastek\WebClientMastek\Views\_ViewImports.cshtml"
using WebClientMastek.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"da9f336f92fe47fbbee1badfccffbe301e50917a", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"06e25f2c80e0d3189a50ac7fc23015fcee110480", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\Pratik\Documents\MASTEK\Pratik14851_.NETLayer\WebClientMastek\WebClientMastek\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "da9f336f92fe47fbbee1badfccffbe301e50917a3763", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<div>
    <h4>
        Display Poduct
    </h4>
    <table id=""productTable""></table>
</div>

    <table>
        <tr>
            <td> <label>Product Id : </label> </td>
            <td> <input type=""text"" id=""txtPid"" /> </td>
        </tr>
        <tr>
            <td> <label>Product Name : </label> </td>
            <td> <input type=""text"" id=""txtPName"" /> </td>
        </tr>
        <tr>
            <td> <label>Price : </label> </td>
            <td> <input type=""text"" id=""txtPrice"" /> </td>
        </tr>
        <tr>
            <td colspan=""2"" style=""text-align:center"">
                <input type=""button"" value=""Add Product"" onclick=""AddProduct();"" />
            </td>
        </tr>
    </table>

    <div>
        <h4>
            One product
        </h4>
        <table id=""product""></table>
        <input type=""text"" id=""textId"" />
        <button onclick=""GetProduct();"">GET</button>
    </div>

    <div>
        <table>
            <tr>
                <td> <");
            WriteLiteral(@"label>Product Id : </label> </td>
                <td> <input type=""text"" id=""textPid"" /> </td>
            </tr>
            <tr>
                <td> <label>Product Name : </label> </td>
                <td> <input type=""text"" id=""textPName"" /> </td>
            </tr>
            <tr>
                <td> <label>Price : </label> </td>
                <td> <input type=""text"" id=""textPrice"" /> </td>
            </tr>
            <tr>
                <td colspan=""2"" style=""text-align:center"">
                    <input type=""button"" value=""Update Product"" onclick=""UpdateProduct();"" />
                </td>
            </tr>
        </table>
    </div>

    <div>
        <h3>
            DeleteProduct
        </h3>
        <input type=""text"" id=""textId2"" />
        <button onclick=""DeleteProduct();"">Delete</button>
    </div>


<script>
    $(document).ready(LoadProductDetails());

        function LoadProductDetails()
        {
            var url = ""https://localhost:44321/api");
            WriteLiteral(@"/product"";

            $.ajax({
                url: url,
                dataType: 'json',
                type: 'GET',
                success: function (data) {

                    // clears table if data exists
                    $('#productTable').empty();

                    // add head row
                    var headerrow = '<tr><th> ProductId </th> <th> ProductName </th> <th> Price </th> </tr>'

                    $('#productTable').append(headerrow);

                    // return value is json array [{.....},{.....}]
                    // its like for loop.
                    $.each(data, function (index, record) {
                        var row = '<tr> <td>' + record.ProductId + '</td> <td>' + record.ProductName + '</td> <td>' + record.ProductPrice + '</td> </tr>'

                        $('#productTable').append(row);
                    });
                }
            });
        };

        function AddProduct()
        {
            var url = ""https://lo");
            WriteLiteral(@"calhost:44321/api/product"";

            var pid = $('#txtPid').val();
            var pname = $('#txtPName').val();
            var cost = $('#txtPrice').val();

            var product = { ProductId: pid, ProductName: pname, ProductPrice: cost}

            $.ajax({
                type: ""POST"",
                url: url,
                contentType: ""application/json; charset=utf-8"",
                dataType: ""json"",
                data: JSON.stringify(product),
                success: function(){
                            LoadProductDetails();
                        },
                error: function(jqxhr){
                            alert(""error: ""+jqxhr.status+"" : ""+jqxhr.statusText);
                        }
            });
        }

    function GetProduct()
    {
        var pid = $('#textId').val();

        var url = ""https://localhost:44321/api/product/"" + pid;

        $.ajax({
            url: url,
            dataType: 'json',
            type: 'GET',
  ");
            WriteLiteral(@"          success: function (data) {

                $('#product').empty();

                var headerrow = '<tr><th> ProductId </th> <th> ProductName </th> <th> Price </th> </tr>'

                $('#product').append(headerrow);

                var row = '<tr> <td>' + data.ProductId + '</td> <td>' + data.ProductName + '</td> <td>' + data.ProductPrice + '</td> </tr>'

                $('#product').append(row);
            },
            error: function (jqxhr) {
                alert(""error: "" + jqxhr.status + "" : "" + jqxhr.statusText);
            }
        });
    }

    function UpdateProduct() {

        var pid = $('#textPid').val();

        var url = ""https://localhost:44321/api/product/"" + pid;

        var pname = $('#textPName').val();
        var cost = $('#textPrice').val();

        var product = { ProductId: pid, ProductName: pname, ProductPrice: cost }

        $.ajax({
            type: ""PUT"",
            url: url,
            contentType: ""application/json;");
            WriteLiteral(@" charset=utf-8"",
            dataType: ""json"",
            data: JSON.stringify(product),
            success: function () {
                LoadProductDetails();
            },
            error: function (jqxhr) {
                alert(""error: "" + jqxhr.status + "" : "" + jqxhr.statusText);
            }
        });
    }

    function DeleteProduct()
    {
        var pid = $('#textId2').val();

        var url = ""https://localhost:44321/api/product/"" + pid;

        $.ajax({
            url: url,
            dataType: 'json',
            type: 'DELETE',
            success: function (data) {
                LoadProductDetails();
                alert(""Successfully deleted"");
            },
            error: function (jqxhr) {
                alert(""error: "" + jqxhr.status + "" : "" + jqxhr.statusText);
            }
        });
    }

</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
